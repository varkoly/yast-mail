/**
 * File:
 *   mail_auto.ycp
 *
 * Package:
 *   Configuration of mail
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of mail settings
 * @return map edited settings or an empty map if canceled
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = CallModule ("mail_auto", [ mm ]);
 */

{
    textdomain "mail";

    import "Mail";
    import "Mode";

    Mode::config = true;
    include "mail/ui.ycp";

    map settings = $[];
    list args = Args ();
    if ( size (args) <= 0 )
    {
	y2error ("Did not get the settings, probably some mistake...");
	return false;
    }
    if ( !is ( Args (0), map ) )
    {
	y2error ("Bad argument for mail_auto: %1", Args (0));
	return false;
    }
    
    {
	integer i = 0;
	while (i < size (Args()))
	{
	    if (is (Args (i), map) && nil != Args (i))	settings = Args (i);	    
	    i = i + 1;
	}
    }

    Mail::Import ( settings );
    y2milestone("Imported: (%1)", settings); // may contain passwords
    Mail::autoyast_config = true;
    
    define set_contents() ``{	
        term contents =
	    `VBox(
		  `VSpacing(1),
		  `RichText( `id(`summary), Mail::Summary()),
		  `VSpacing(),
		  `HBox(
			`PushButton(`id(`configure), _("&Configure Mail")),
			`HStretch(),
			`PushButton(`id(`reset), _("&Reset Configuration"))
			),
		  `VSpacing(1)
		  );

	Wizard::SetContents(_("Mail Configuration"),
			    contents, "", true, true);
    }

  
    set_contents();
    any result = nil;
    any ret = nil;
    
    repeat {
	ret = UI::UserInput();
	if (ret == `configure)
	{	    	    	    
	    symbol result = MailAutoSequence ();		    
		
	    if (result == `next || result == `finish)
	    {		 
		settings = Mail::Export ();		    
	    }
	    Mail::Set(settings);
	    set_contents();
	}
	else if ( ret == `reset)
	{
	    settings = $[];
	    Mail::Set(settings);
	    set_contents();
	}		
    } until (ret == `back || ret == `next || ret ==`key);   
  
    return [ret, settings];    
          
}
